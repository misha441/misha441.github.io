{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["App","useState","Date","time","setTime","observable$","setObservable","isDoubleClick","setIsDoubleClick","RxInterval","useMemo","interval","doubleClickTimer","setTimeout","useEffect","clearTimeout","className","getUTCHours","slice","getUTCMinutes","getUTCSeconds","onClick","unsubscribe","startSubscribe","subscribe","val","parse","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"4MAmFeA,MA9Ef,WACI,MAAwBC,mBAAS,IAAIC,KAAK,IAA1C,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAqCH,mBAAS,MAA9C,mBAAOI,EAAP,KAAoBC,EAApB,KACA,EAA0CL,oBAAS,GAAnD,mBAAOM,EAAP,KAAsBC,EAAtB,KAEMC,EAAaC,mBAAQ,kBAAMC,YAAS,OAAM,IAE1CC,EAAmBF,mBAAQ,WAC7B,GAAIH,EACA,OAAOM,YAAW,kBAAML,GAAiB,KAAQ,OAEtD,CAACD,IA8CJ,OA5CAO,qBAAU,WACDP,GACDQ,aAAaH,KAElB,CAACL,IAyCA,sBAAKS,UAAU,MAAf,UACI,qBAAKA,UAAU,YAAf,UAES,IAAMb,EAAKc,eAAeC,OAAO,GAAK,KACtC,IAAMf,EAAKgB,iBAAiBD,OAAO,GAAK,KACxC,IAAMf,EAAKiB,iBAAiBF,OAAO,KAG5C,sBAAKF,UAAU,UAAf,UACI,wBAAQK,QAhDG,WACnB,GAAIhB,EACAA,EAAYiB,cACZhB,EAAc,MACdF,EAAQ,IAAIF,KAAK,QACd,CACH,IAAMqB,EAAiBd,EAAWe,WAAU,SAAAC,GACxCrB,EAAQ,IAAIF,KAAKA,KAAKwB,MAAM,IAAIxB,KAAW,IAANuB,IAAcvB,KAAKwB,MAAMvB,QAElEG,EAAciB,KAuCuBP,UAAS,wEACPX,EAAc,WAAa,aAD9D,SAEKA,EAAc,OAAS,UAE5B,wBAAQgB,QAvCE,WACdd,GACAC,GAAiB,GACbH,IACAA,EAAYiB,cACZhB,EAAc,QAGlBE,GAAiB,IA+BmBQ,UAAU,OAA1C,kBACA,wBAAQK,QA3BG,WACfhB,GACAA,EAAYiB,cAEhBhB,EAAc,MACdF,EAAQ,IAAIF,KAAK,IACjB,IAAMqB,EAAiBd,EAAWe,WAAU,SAAAC,GACxCrB,EAAQ,IAAIF,KAAKA,KAAKwB,MAAM,IAAIxB,KAAW,IAANuB,IAAcvB,KAAKwB,MAAM,IAAIxB,KAAK,SAE3EI,EAAciB,IAkB2BP,UAAU,QAA3C,0BCjEDW,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAI1Bb,K","file":"static/js/main.98592ba1.chunk.js","sourcesContent":["import './App.css';\nimport {interval} from 'rxjs';\nimport {useEffect, useMemo, useState} from \"react\";\n\n\nfunction App() {\n    const [time, setTime] = useState(new Date(0))\n    const [observable$, setObservable] = useState(null)\n    const [isDoubleClick, setIsDoubleClick] = useState(false)\n\n    const RxInterval = useMemo(() => interval(100), [])\n\n    const doubleClickTimer = useMemo(() => {\n        if (isDoubleClick) {\n            return setTimeout(() => setIsDoubleClick(false), 300)\n        }\n    }, [isDoubleClick])\n\n    useEffect(() => {\n        if (!isDoubleClick) {\n            clearTimeout(doubleClickTimer)\n        }\n    }, [isDoubleClick])\n\n    const startStopwatch = () => {\n        if (observable$) {\n            observable$.unsubscribe()\n            setObservable(null)\n            setTime(new Date(0))\n        } else {\n            const startSubscribe = RxInterval.subscribe(val => {\n                setTime(new Date(Date.parse(new Date(val * 100)) + Date.parse(time)))\n            })\n            setObservable(startSubscribe)\n        }\n    }\n\n    const waitStopwatch = () => {\n        if (isDoubleClick) {\n            setIsDoubleClick(false)\n            if (observable$) {\n                observable$.unsubscribe()\n                setObservable(null)\n            }\n        } else {\n            setIsDoubleClick(true)\n        }\n\n    }\n\n    const resetStopwatch = () => {\n        if (observable$) {\n            observable$.unsubscribe()\n        }\n        setObservable(null)\n        setTime(new Date(0))\n        const startSubscribe = RxInterval.subscribe(val => {\n            setTime(new Date(Date.parse(new Date(val * 100)) + Date.parse(new Date(0))))\n        })\n        setObservable(startSubscribe)\n    }\n\n    return (\n        <div className=\"App\">\n            <div className=\"stopwatch\">\n                {\n                    ('0' + time.getUTCHours()).slice(-2) + ':' +\n                    ('0' + time.getUTCMinutes()).slice(-2) + ':' +\n                    ('0' + time.getUTCSeconds()).slice(-2)\n                }\n            </div>\n            <div className=\"buttons\">\n                <button onClick={startStopwatch} className={`start-stop \n                                                 ${observable$ ? 'stop-btn' : 'start-btn'}`}>\n                    {observable$ ? 'Stop' : 'Start'}\n                </button>\n                <button onClick={waitStopwatch} className=\"wait\">Wait</button>\n                <button onClick={resetStopwatch} className=\"reset\">Reset</button>\n            </div>\n        </div>\n    );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n\nreportWebVitals();\n"],"sourceRoot":""}